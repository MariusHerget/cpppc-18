<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 734 601"><defs><style>.cls-1{fill:#d6ddd1;}.cls-2{font-size:36px;font-family:NirmalaUI-Semilight, Nirmala UI;}.cls-3{letter-spacing:-0.01em;}.cls-4{letter-spacing:-0.02em;}.cls-5{letter-spacing:-0.01em;}.cls-6{fill:#333;}.cls-15,.cls-7{font-size:12px;font-family:UbuntuMonoNerdFontCM-Regular, UbuntuMono NF;}.cls-13,.cls-7{fill:#f15a24;}.cls-8{fill:#ccc;}.cls-9{fill:#d9e021;}.cls-10{fill:gray;}.cls-11{fill:#65c8d0;}.cls-12{fill:#8cc63f;}.cls-14{fill:#84ad6d;}.cls-15{fill:#094537;}</style></defs><title>Asset 1decomp-tilegroup</title><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><rect class="cls-1" width="734" height="601"/><text class="cls-2" transform="translate(18.63 43.11)">Ana<tspan class="cls-3" x="60.75" y="0">t</tspan><tspan x="71.91" y="0">omy </tspan><tspan class="cls-4" x="149.55" y="0">o</tspan><tspan x="169.54" y="0">f a C++ Class: Basic Rule </tspan><tspan class="cls-4" x="557.49" y="0">o</tspan><tspan x="577.48" y="0">f Th</tspan><tspan class="cls-5" x="636.38" y="0">r</tspan><tspan x="648.11" y="0">ee</tspan></text><rect class="cls-6" x="17" y="62" width="700" height="521"/><text class="cls-7" transform="translate(31.64 91.11)">class<tspan class="cls-8" x="30" y="0"> </tspan><tspan class="cls-9" x="36" y="0">Container </tspan><tspan class="cls-8" x="96" y="0">{</tspan><tspan class="cls-8"><tspan x="0" y="14.4" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="14.4">// Default visibility of class members is private,</tspan></tspan><tspan class="cls-10"><tspan x="0" y="28.8" xml:space="preserve">  // internal typedefs are usually placed here.</tspan></tspan><tspan class="cls-8"><tspan x="0" y="43.2" xml:space="preserve">  </tspan><tspan class="cls-11" x="12" y="43.2">typedef </tspan><tspan x="60" y="43.2">Container self_t;</tspan></tspan><tspan class="cls-11"><tspan x="0" y="72">public</tspan><tspan class="cls-8" x="36" y="72" xml:space="preserve">:  </tspan></tspan><tspan class="cls-8"><tspan x="0" y="86.4" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="86.4">// Constructors</tspan><tspan x="0" y="100.8" xml:space="preserve">  Container();                                </tspan><tspan class="cls-10" x="276" y="100.8">// Default</tspan><tspan x="0" y="115.2" xml:space="preserve">  Container(</tspan><tspan class="cls-12" x="72" y="115.2">int</tspan><tspan x="90" y="115.2" xml:space="preserve"> size, </tspan><tspan class="cls-12" x="132" y="115.2">bool</tspan><tspan x="156" y="115.2" xml:space="preserve"> arg = </tspan><tspan class="cls-13" x="198" y="115.2">true</tspan><tspan x="222" y="115.2" xml:space="preserve">);       </tspan><tspan class="cls-10" x="276" y="115.2">// Params</tspan><tspan x="0" y="129.6" xml:space="preserve">  Container(</tspan><tspan class="cls-12" x="72" y="129.6">const</tspan><tspan x="102" y="129.6" xml:space="preserve"> self_t &amp; other) = </tspan><tspan class="cls-11" x="216" y="129.6">default</tspan><tspan x="258" y="129.6" xml:space="preserve">;  </tspan><tspan class="cls-10" x="276" y="129.6">// Copy</tspan><tspan x="0" y="144" xml:space="preserve">   </tspan><tspan x="0" y="158.4" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="158.4">// Destructor</tspan><tspan x="0" y="172.8" xml:space="preserve">  ~Container();</tspan><tspan x="0" y="187.2" xml:space="preserve">  </tspan><tspan x="0" y="201.6" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="201.6">// Operators</tspan><tspan x="0" y="216" xml:space="preserve">  self_t &amp; operator=(</tspan><tspan class="cls-12" x="126" y="216">const</tspan><tspan x="156" y="216" xml:space="preserve"> self_t &amp; other);   </tspan><tspan class="cls-10" x="276" y="216">// Assignment</tspan><tspan x="0" y="230.4" xml:space="preserve">  </tspan><tspan x="0" y="244.8" xml:space="preserve">  </tspan><tspan class="cls-12" x="12" y="244.8">bool</tspan><tspan x="36" y="244.8" xml:space="preserve"> operator==(</tspan><tspan class="cls-12" x="108" y="244.8">const</tspan><tspan x="138" y="244.8" xml:space="preserve"> self_t &amp; rhs) </tspan><tspan class="cls-11" x="228" y="244.8">const</tspan><tspan x="258" y="244.8" xml:space="preserve">;  </tspan><tspan class="cls-10" x="276" y="244.8">// Equality</tspan><tspan x="0" y="259.2" xml:space="preserve">  </tspan><tspan class="cls-12" x="12" y="259.2">bool</tspan><tspan x="36" y="259.2" xml:space="preserve"> operator!=(</tspan><tspan class="cls-12" x="108" y="259.2">const</tspan><tspan x="138" y="259.2" xml:space="preserve"> self_t &amp; rhs) </tspan><tspan class="cls-11" x="228" y="259.2">const</tspan><tspan x="258" y="259.2" xml:space="preserve">;  </tspan><tspan class="cls-10" x="276" y="259.2">// Inequality</tspan></tspan><tspan class="cls-10"><tspan x="0" y="273.6" xml:space="preserve"> </tspan></tspan><tspan class="cls-11"><tspan x="0" y="288">public</tspan><tspan class="cls-8" x="36" y="288">:</tspan></tspan><tspan class="cls-8"><tspan x="0" y="302.4" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="302.4">// Pure virtual functions are declared with `= 0`,</tspan></tspan><tspan class="cls-10"><tspan x="0" y="316.8" xml:space="preserve">  // stating that no implementation is specified, so this</tspan><tspan x="0" y="331.2" xml:space="preserve">  // class cannot be instantiated itself (abstract class).</tspan><tspan x="0" y="345.6" xml:space="preserve">  // Method must be implemented in a derived class.</tspan></tspan><tspan class="cls-8"><tspan x="0" y="360" xml:space="preserve">  </tspan><tspan class="cls-11" x="12" y="360">virtual </tspan><tspan class="cls-12" x="60" y="360">int</tspan><tspan x="78" y="360" xml:space="preserve"> capacity() = </tspan><tspan class="cls-13" x="162" y="360">0</tspan><tspan x="168" y="360">;</tspan><tspan x="0" y="374.4"> </tspan></tspan><tspan class="cls-11"><tspan x="0" y="388.8">protected</tspan><tspan class="cls-8" x="54" y="388.8">:</tspan></tspan><tspan class="cls-8"><tspan x="0" y="403.2" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="403.2">// Declarations visible to types derived from this class</tspan></tspan><tspan class="cls-11"><tspan x="0" y="432">private</tspan><tspan class="cls-8" x="42" y="432">:</tspan></tspan><tspan class="cls-8"><tspan x="0" y="446.4" xml:space="preserve">  </tspan><tspan class="cls-10" x="12" y="446.4">// Member objects at the bottom, in private section</tspan></tspan><tspan class="cls-10"><tspan x="0" y="460.8" xml:space="preserve">  </tspan><tspan class="cls-12" x="12" y="460.8">int</tspan><tspan class="cls-8" x="30" y="460.8" xml:space="preserve"> num_buckets_ = </tspan><tspan class="cls-13" x="126" y="460.8">32</tspan><tspan class="cls-8" x="138" y="460.8">;</tspan></tspan><tspan class="cls-8"><tspan x="0" y="475.2">};</tspan></tspan></text><rect class="cls-14" x="395.5" y="74.5" width="312" height="94"/><path d="M707,75v93H396V75H707m1-1H395v95H708V74Z"/><text class="cls-15" transform="translate(405.64 95.95)">Declaring a constructor, destructor or<tspan x="0" y="14.4">operator `= default` states that</tspan><tspan x="0" y="28.8">- the definition of this method is user-specified</tspan><tspan x="0" y="43.2">- the default behaviour, usually a member-wise</tspan><tspan x="0" y="57.6" xml:space="preserve">  operation, is to be used</tspan></text><text></text><rect class="cls-14" x="395.5" y="174.5" width="312" height="106"/><path d="M707,175V280H396V175H707m1-1H395V281H708V174Z"/><text class="cls-15" transform="translate(405.64 195.95)">A copy constructor is defined, so according to<tspan x="0" y="14.4">Rule of 3/5/0 this tells us:</tspan><tspan x="0" y="28.8">- the class encapsulates some ownership and this</tspan><tspan x="0" y="43.2" xml:space="preserve">  is its only purpose</tspan><tspan x="0" y="57.6">- Assignment operator and destructor must be</tspan><tspan x="0" y="72" xml:space="preserve">  defined, at the very least as `= default`.</tspan></text><rect class="cls-14" x="395.5" y="369.5" width="312" height="50"/><path d="M707,370v49H396V370H707m1-1H395v51H708V369Z"/><text class="cls-15" transform="translate(405.64 390.95)">Grouping methods and members using access<tspan x="0" y="14.4">qualifiers, even if redundant, is good style.</tspan></text><rect class="cls-14" x="395.5" y="287.5" width="312" height="75"/><path d="M707,288v74H396V288H707m1-1H395v76H708V287Z"/><text class="cls-15" transform="translate(405.64 308.95)">Some methods, like comparison operators, are<tspan x="0" y="14.4">required to be const (= must not modify members).</tspan><tspan x="0" y="28.8">Likewise, some methods enforce constâ€™ness of</tspan><tspan x="0" y="43.2">parameters, like `rhs` in assignment or copy.</tspan></text><rect class="cls-14" x="395.5" y="509.5" width="312" height="50"/><path d="M707,510v49H396V510H707m1-1H395v51H708V509Z"/><text class="cls-15" transform="translate(405.64 530.95)">In-class initializer: initialize member with<tspan x="0" y="14.4">this value, like in constructor initializer list.</tspan></text></g></g></svg>